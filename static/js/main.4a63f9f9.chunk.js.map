{"version":3,"sources":["containers/Nav.js","components/Nav.js","actions/Ranking.js","components/Ranking.js","containers/Ranking.js","App.js","reducers/shopping.js","reducers/Ranking.js","serviceWorker.js","index.js","createStore.js"],"names":["connect","state","categories","shopping","dispatch","onClick","path","push","_ref","react_default","a","createElement","Drawer","variant","List","map","category","ListItem","button","key","concat","id","to","ListItemText","primary","name","startRequest","type","payload","receiveData","error","response","finishRequest","fetchRanking","categoryId","Object","asyncToGenerator","regenerator_default","mark","_callee","getState","queryString","data","wrap","_context","prev","next","find","replace","abrupt","qs","stringify","appid","category_id","fetchJsonp","sent","json","t0","stop","_x","_x2","apply","this","arguments","Ranking","props","onMount","nextProps","onUpdate","_this$props","ranking","item","i","Card","code","style","maxWidth","margin","CardMedia","image","imageUrl","title","height","CardContent","Typography","CardActions","Button","color","fullWidth","href","url","React","Component","defaultProps","ownProps","actions","App","className","paddingLeft","CssBaseline","AppBar","left","Toolbar","containers_Nav","marginTop","padding","react_router","component","render","match","containers_Ranking","params","initialState","getRanking","itemLength","ResultSet","totalResultsReturned","index","Result","Code","Name","Url","Image","Medium","undefined","reducers_Ranking","length","action","objectSpread","Boolean","window","location","hostname","history","createHashHistory","store","reduxCreateStore","combineReducers","reducers","router","connectRouter","applyMiddleware","thunk","routerMiddleware","logger","ReactDOM","es","esm","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a63f9f9.chunk.js","sourcesContent":["import { connect } from 'react-redux';\nimport Nav from '../components/Nav';\nimport { push } from 'connected-react-router';\n\nconst mapStateToProps = state => ({\n    categories: state.shopping.categories\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onClick(path) {\n        dispatch(push(path));\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Nav);","import { Drawer, List, ListItem, ListItemText } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default function Nav({ categories, onClick }) {\n\n    const to = category => (\n        category.id === '1' ? '/all' : `/category/${category.id}`\n    );\n\n    return (\n        <Drawer variant='permanent'>\n            <List>\n                {categories.map(category => (\n                    <ListItem button key={`nav-item-${category.id}`} onClick={() => onClick(to(category))}>\n                        <ListItemText primary={category.name} />\n                    </ListItem>\n                ))}\n            </List>\n        </Drawer>\n    );\n\n}\n\nNav.propTypes = {\n    categories: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired\n        })\n    ).isRequired,\n    onClick: PropTypes.func.isRequired\n};","import { replace } from 'connected-react-router';\nimport fetchJsonp from 'fetch-jsonp';\nimport qs from 'qs';\n\nconst API_URL = 'https://shopping.yahooapis.jp/ShoppingWebService/V1/json/categoryRanking';\n\nconst APP_ID = 'dj00aiZpPWtPMENZTTMwNlByRyZzPWNvbnN1bWVyc2VjcmV0Jng9NTg-'\n\n// リクエスト開始\nconst startRequest = category => ({\n    type: 'START_REQUEST',\n    payload: { category }\n})\n\n// レスポンス受信\nconst receiveData = (category, error, response) => ({\n    type: 'RECEIVE_DATA',\n    payload: { category, error, response }\n})\n\n// リクエスト完了\nconst finishRequest = category => ({\n    type: 'FINISH_REQUEST',\n    payload: { category }\n})\n\n// ランキング取得\nexport const fetchRanking = categoryId => {\n    return async (dispatch, getState) => {\n\n        // find category\n        const categories = getState().shopping.categories;\n        const category = categories.find(category => (category.id === categoryId));\n\n        // if not found category, redirect to root\n        if (typeof category === 'undefined') {\n            dispatch(replace('/'));\n            return;\n        }\n\n        // start request\n        dispatch(startRequest(category));\n\n        // query string\n        const queryString = qs.stringify({\n            appid: APP_ID,\n            category_id: categoryId\n        });\n\n        // receive data\n        try {\n            const response = await fetchJsonp(`${API_URL}?${queryString}`);\n            const data = await response.json();\n            dispatch(receiveData(category, null, data));\n        } catch (err) {\n            dispatch(receiveData(category, err));\n        }\n\n        // finish request\n        dispatch(finishRequest(category));\n    }\n}","import { Button, Card, CardActions, CardContent, CardMedia, Typography } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport React from 'react';\n\nexport default class Ranking extends React.Component {\n\n    // コンポーネントマウント前\n    componentWillMount() {\n        this.props.onMount(this.props.categoryId);\n    }\n\n    // コンポーネントのpropsが変更される前\n    componentWillReceiveProps(nextProps) {\n        if (this.props.categoryId !== nextProps.categoryId) {\n            this.props.onUpdate(nextProps.categoryId);\n        }\n    }\n\n    render() {\n        const { category, ranking, error } = this.props;\n\n        return (\n            <div>\n                <h2>{typeof category !== 'undefined' ? `${category.name} Ranking` : ''}</h2>\n                {(() => {\n                    if (error) {\n                        // エラー表示\n                        return <p>Error has occured, please reload.</p>;\n                    } else if (typeof ranking === 'undefined') {\n                        // リクエスト前\n                        return <p>Now Loading...</p>\n                    } else {\n                        // ランキング表示\n                        return (\n                            ranking.map((item, i) => (\n                                <Card\n                                    key={`ranking-item-${item.code}`}\n                                    style={{\n                                        maxWidth: '500px', margin: '32px auto'\n                                    }}>\n                                    <CardMedia\n                                        image={item.imageUrl}\n                                        title={`No.${i + 1} ${item.name}`}\n                                        style={{ height: '200px' }} />\n                                    <CardContent>\n                                        <Typography type='title'>\n                                            {`No.${i + 1} ${item.name}`}\n                                        </Typography>\n                                    </CardContent>\n                                    <CardActions>\n                                        <Button variant='contained' color='primary' fullWidth href={item.url}>\n                                            Go to page\n                                            </Button>\n                                    </CardActions>\n                                </Card>\n                            ))\n                        );\n                    }\n                })()}\n            </div >\n        );\n    }\n}\n\nRanking.propTypes = {\n    // from props\n    categoryId: PropTypes.string,\n\n    // from dispatch\n    onMount: PropTypes.func.isRequired,\n    onUpdate: PropTypes.func.isRequired,\n\n    // from state\n    category: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired\n    }),\n    ranking: PropTypes.arrayOf(\n        PropTypes.shape({\n            code: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            url: PropTypes.string.isRequired,\n            imageUrl: PropTypes.string.isRequired,\n        })\n    ),\n    error: PropTypes.bool.isRequired\n}\n\nRanking.defaultProps = {\n    categoryId: '1'\n}","import * as actions from '../actions/Ranking';\nimport { connect } from 'react-redux';\nimport Ranking from '../components/Ranking';\n\nconst mapStateToProps = (state, ownProps) => ({\n    categoryId: ownProps.categoryId,\n    category: state.Ranking.category,\n    ranking: state.Ranking.ranking,\n    error: state.Ranking.error\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onMount(categoryId) {\n        dispatch(actions.fetchRanking(categoryId));\n    },\n    onUpdate(categoryId) {\n        dispatch(actions.fetchRanking(categoryId));\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);","import { AppBar, CssBaseline, Toolbar, Typography } from \"@material-ui/core\";\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Nav from './containers/Nav';\nimport Ranking from './containers/Ranking';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ paddingLeft: 190 }}>\n      <CssBaseline />\n\n      <AppBar style={{ left: 190 }}>\n        <Toolbar>\n          <Typography type='title' color='inherit'>\n            Yahoo! Shopping Ranking\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Nav />\n\n      <div style={{ marginTop: 64, padding: 32 }}>\n        <Switch>\n          <Route path='/all' component={Ranking} />\n          <Route path='/category/:id' render={\n            ({ match }) => <Ranking categoryId={match.params.id} />\n          } />\n        </Switch>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\n    categories: [\n        {\n            id: '1',\n            name: 'All Categories'\n        },\n        {\n            id: '2502',\n            name: 'PC/Peripherals'\n        },\n        {\n            id: '10002',\n            name: 'Book/Magazine/Comic'\n        }\n    ]\n}\n\nexport default () => initialState;","const getRanking = response => {\n    const ranking = [];\n    const itemLength = response.ResultSet.totalResultsReturned;\n    for (let index = 0; index < itemLength; index++) {\n        const item = response.ResultSet['0'].Result[index + ''];\n        ranking.push(\n            {\n                code: item.Code,\n                name: item.Name,\n                url: item.Url,\n                imageUrl: item.Image.Medium\n            }\n        );\n    }\n    return ranking;\n}\n\nconst initialState = {\n    category: undefined,\n    ranking: undefined,\n    error: false\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'START_REQUEST':\n            return {\n                category: action.payload.category,\n                ranking: undefined,\n                error: false\n            };\n        case 'RECEIVE_DATA':\n            return action.payload.error\n                ? { ...state, error: true }\n                : { ...state, ranking: getRanking(action.payload.response) }\n        default:\n            return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ConnectedRouter } from \"connected-react-router\";\nimport { createHashHistory } from \"history\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport createStore from \"./createStore\";\nimport * as serviceWorker from './serviceWorker';\n\nconst history = createHashHistory();\n\nconst store = createStore(history);\n\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedRouter history={history}>\n            <App />\n        </ConnectedRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { applyMiddleware, combineReducers, createStore as reduxCreateStore } from 'redux';\nimport { logger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport * as reducers from './reducers';\n\nexport default function createStore(history) {\n    return reduxCreateStore(\n        combineReducers({\n            ...reducers,\n            router: connectRouter(history)\n        }),\n        applyMiddleware(\n            thunk,\n            routerMiddleware(history),\n            logger,\n        )\n    );\n}\n"],"sourceRoot":""}